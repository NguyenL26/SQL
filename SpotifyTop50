# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

1. What are the top 10 songs?

SELECT track_name, artist_name, popularity FROM BIT_DB.SpotifyData
ORDER BY popularity DESC
LIMIT 10;

2. What artist has the most top songs?

SELECT artist_name, COUNT(artist_name) AS CountArtist FROM BIT_DB.SpotifyData
GROUP BY artist_name
ORDER BY CountArtist DESC;

3. What is the average danceability?

SELECT AVG(danceability)
FROM BIT_DB.SpotifyData;

The average danceability for the songs in Spotify's top 50 is 0.68572.

4. How would the top 15 songs be categorized according to the average danceability?

SELECT track_name, danceability,
(CASE
WHEN danceability > 0.68572 THEN 'Above Average'
WHEN danceability = 0.68572 THEN 'Average'
WHEN danceability < 0.68572 THEN 'Below Average'
END) AS ComparedAverage
FROM BIT_DB.SpotifyData
LIMIT 15;
